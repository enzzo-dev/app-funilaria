using Ats.Domain.Library.Entities;
using Ats.Domain.Library.Exceptions;
using Ats.Domain.Library.Helpers;
using BodyShopAI.Domain.Enumerators;
using BodyShopAI.Domain.Helpers;
using System;
using System.Collections.Generic;

namespace BodyShopAI.Domain.Entities
{
    [Serializable]
    public class User : BaseEntity
    {
        public Guid IdUser { get; private set; }
        public string Name { get; private set; }
        public string Surname { get; private set; }
        public byte Role { get; private set; }
        public string Email { get; private set; }
        public string Password { get; private set; }
        public int Phone { get; private set; }
        public byte IdStatus { get; private set; }
        public DateTime InsertDate { get; private set; }
        public DateTime? ModifyDate { get; private set; }
        public bool IsClient { get; private set; }
        public List<Car> OwnCar { get; private set; }
        public List<Budget> Budgets { get; private set; }

        public static void CreateUser(string name, string surname, string email, string password, int phone, bool isClient, byte role) 
                                     => new User(name, surname, email, password, phone, isClient, role);

        protected User(string name, string surname, string email, string password, int phone, bool isClient, byte role)
        {
            IdUser = Guid.NewGuid();

            SetNameAndSurname(name, surname);
            SetEmail(email);
            Password = Passwords.GetAutogenerated();
            SetPhone(phone);
            SetStatus(isClient);
            SetRole(role, isClient);

            InsertDate = DateTimeBrasil.Now;

        }

        public void Update(string name, string surname, byte? role, int? phone = null)
        {
            SetNameAndSurname(name, surname);
            SetPhone(phone);
            SetRole(role.Value, false);

            ModifyDate = DateTimeBrasil.Now;
        }

        public void Delete()
        {
            ModifyDate = DateTimeBrasil.Now;
            IdStatus = (byte)Status.Deleted;
        }

        #region Private Methods
        private void SetNameAndSurname(string name, string surname)
        {
            if (!name.IsNullOrWhiteSpace())
                Name = name;

            if (!surname.IsNullOrWhiteSpace())
                Surname = surname;
        }

        private void SetPhone(int? phone)
        {
            if (phone.HasValue && phone > 0)
                Phone = phone.Value;
        }

        private void SetEmail(string email)
        {
            if (Email == email)
                return;

            if (!email.IsNullOrWhiteSpace())
                throw new DomainException("Email cannot be null");

            if (!RegularExpressions.IsMatch(RegularExpressions.EMAIL, email))
                throw new DomainException("Email doesn't match email regular expression");

            Email = email.Trim();

        }

        private bool IsUserPassword(string password) =>
            Passwords.VerifyPassword(password, Password);

        private void SetPassword(string password)
        {
            if (IsUserPassword(password))
                return;

            if (string.IsNullOrWhiteSpace(password))
                throw new DomainException("Password cannot be null");

            if (!RegularExpressions.IsMatch(RegularExpressions.PASSWORD, password))
                throw new InvalidPasswordException("Password doesn't match password regular expression");

            Password = Passwords.Encrypt(password);

        }

        private void SetStatus(bool isClient)
        {
            if (!isClient)
                IdStatus = (byte)Status.Active;
            else
                IdStatus = (byte)Status.Pending;
        }

        public void SetRole(byte? role, bool isClient)
        {
            if(role.HasValue)
                Role = role.Value;

            if (isClient)
                Role = (byte)Roles.Client;
        }
        #endregion
    }
}
